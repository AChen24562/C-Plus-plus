Single Linked list
    A single linked list is a list of nodes where each node has a single link to
    the next node in the structure
    Final Node links to nullptr

    Similar  to a queue
    head pointer: first node on  the list
    tail pointer: last node on the list

    Similar to stack/queue:
      Can only travel in one direction
      Stack node, queue node, or single linked list: all next pointers point to the next data
    Difference:
        Can insert or remove anywhere

    BIG O SPEED
      Push_front O(1)
      Push_Back O(1)
      Pop_Front O(1)
      pop_back O(n)
      Insert O(n)
      erase O(n)
      Less memory per node to one less pointer, but only forward transversal


Doubly Linked List
  List of nodes where each node has two links to previous and next
  Last node points to nullptr

  head: pointer to first node
  tail: Pointer to last node

  Can be traverse fowards or backwards

  Need to find element when inserting same with single link list
    But if you have a pointer to the specific index, you can just go there
    and go backwards

Container class: implement a data structure as a class an object oriented approach

  BIG O SPEED
    Push_Front O(1)
    Push_back O(1)
    Pop_front O(1)
    Pop_back O(1)
    Insert O(n)
      If pointer to the specific node is known, then O(1)
    Erase O(n)
      If pointer to the specific node is known, then O(1)

    More memory per node due to a forward and backward pointer, but has two directions
    that you can move in
